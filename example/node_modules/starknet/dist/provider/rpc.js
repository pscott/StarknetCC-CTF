"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcProvider = void 0;
var fetchPonyfill_1 = __importDefault(require("../utils/fetchPonyfill"));
var hash_1 = require("../utils/hash");
var json_1 = require("../utils/json");
var number_1 = require("../utils/number");
var provider_1 = require("../utils/provider");
var rpc_1 = require("../utils/responseParser/rpc");
var stark_1 = require("../utils/stark");
var utils_1 = require("./utils");
var RpcProvider = /** @class */ (function () {
    function RpcProvider(optionsOrProvider) {
        var _this = this;
        this.responseParser = new rpc_1.RPCResponseParser();
        var nodeUrl = optionsOrProvider.nodeUrl, retries = optionsOrProvider.retries, headers = optionsOrProvider.headers;
        this.nodeUrl = nodeUrl;
        this.retries = retries || 200;
        this.headers = __assign({ 'Content-Type': 'application/json' }, headers);
        this.getChainId().then(function (chainId) {
            _this.chainId = chainId;
        });
    }
    RpcProvider.prototype.fetch = function (method, params) {
        return (0, fetchPonyfill_1.default)(this.nodeUrl, {
            method: 'POST',
            body: (0, json_1.stringify)({ method: method, jsonrpc: '2.0', params: params, id: 0 }),
            headers: this.headers,
        });
    };
    RpcProvider.prototype.errorHandler = function (error) {
        if (error) {
            var code = error.code, message = error.message;
            throw new Error("".concat(code, ": ").concat(message));
        }
    };
    RpcProvider.prototype.fetchEndpoint = function (method, params) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var rawResult, _b, error, result, error_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.fetch(method, params)];
                    case 1:
                        rawResult = _c.sent();
                        return [4 /*yield*/, rawResult.json()];
                    case 2:
                        _b = _c.sent(), error = _b.error, result = _b.result;
                        this.errorHandler(error);
                        return [2 /*return*/, result];
                    case 3:
                        error_1 = _c.sent();
                        this.errorHandler((_a = error_1 === null || error_1 === void 0 ? void 0 : error_1.response) === null || _a === void 0 ? void 0 : _a.data);
                        throw error_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    // Methods from Interface
    RpcProvider.prototype.getChainId = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_chainId')];
            });
        });
    };
    // Methods from Interface
    RpcProvider.prototype.getBlock = function (blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getBlockWithTxHashes(blockIdentifier).then(this.responseParser.parseGetBlockResponse)];
            });
        });
    };
    RpcProvider.prototype.getBlockHashAndNumber = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_blockHashAndNumber')];
            });
        });
    };
    RpcProvider.prototype.getBlockWithTxHashes = function (blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            var block_id;
            return __generator(this, function (_a) {
                block_id = new utils_1.Block(blockIdentifier).identifier;
                return [2 /*return*/, this.fetchEndpoint('starknet_getBlockWithTxHashes', { block_id: block_id })];
            });
        });
    };
    RpcProvider.prototype.getBlockWithTxs = function (blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            var block_id;
            return __generator(this, function (_a) {
                block_id = new utils_1.Block(blockIdentifier).identifier;
                return [2 /*return*/, this.fetchEndpoint('starknet_getBlockWithTxs', { block_id: block_id })];
            });
        });
    };
    RpcProvider.prototype.getClassHashAt = function (blockIdentifier, contractAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var block_id;
            return __generator(this, function (_a) {
                block_id = new utils_1.Block(blockIdentifier).identifier;
                return [2 /*return*/, this.fetchEndpoint('starknet_getClassHashAt', {
                        block_id: block_id,
                        contract_address: contractAddress,
                    })];
            });
        });
    };
    RpcProvider.prototype.getNonce = function (contractAddress, blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            var block_id;
            return __generator(this, function (_a) {
                block_id = new utils_1.Block(blockIdentifier).identifier;
                return [2 /*return*/, this.fetchEndpoint('starknet_getNonce', {
                        contract_address: contractAddress,
                        block_id: block_id,
                    })];
            });
        });
    };
    RpcProvider.prototype.getPendingTransactions = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_pendingTransactions')];
            });
        });
    };
    RpcProvider.prototype.getProtocolVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('Pathfinder does not implement this rpc 0.1.0 method');
            });
        });
    };
    RpcProvider.prototype.getStateUpdate = function (blockIdentifier) {
        return __awaiter(this, void 0, void 0, function () {
            var block_id;
            return __generator(this, function (_a) {
                block_id = new utils_1.Block(blockIdentifier).identifier;
                return [2 /*return*/, this.fetchEndpoint('starknet_getStateUpdate', { block_id: block_id })];
            });
        });
    };
    RpcProvider.prototype.getStorageAt = function (contractAddress, key, blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            var parsedKey, block_id;
            return __generator(this, function (_a) {
                parsedKey = (0, number_1.toHex)((0, number_1.toBN)(key));
                block_id = new utils_1.Block(blockIdentifier).identifier;
                return [2 /*return*/, this.fetchEndpoint('starknet_getStorageAt', {
                        contract_address: contractAddress,
                        key: parsedKey,
                        block_id: block_id,
                    })];
            });
        });
    };
    // Methods from Interface
    RpcProvider.prototype.getTransaction = function (txHash) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getTransactionByHash(txHash).then(this.responseParser.parseGetTransactionResponse)];
            });
        });
    };
    RpcProvider.prototype.getTransactionByHash = function (txHash) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_getTransactionByHash', { transaction_hash: txHash })];
            });
        });
    };
    RpcProvider.prototype.getTransactionByBlockIdAndIndex = function (blockIdentifier, index) {
        return __awaiter(this, void 0, void 0, function () {
            var block_id;
            return __generator(this, function (_a) {
                block_id = new utils_1.Block(blockIdentifier).identifier;
                return [2 /*return*/, this.fetchEndpoint('starknet_getTransactionByBlockIdAndIndex', { block_id: block_id, index: index })];
            });
        });
    };
    RpcProvider.prototype.getTransactionReceipt = function (txHash) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_getTransactionReceipt', { transaction_hash: txHash })];
            });
        });
    };
    RpcProvider.prototype.getClass = function (classHash) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_getClass', { class_hash: classHash })];
            });
        });
    };
    RpcProvider.prototype.getClassAt = function (contractAddress, blockIdentifier) {
        return __awaiter(this, void 0, void 0, function () {
            var block_id;
            return __generator(this, function (_a) {
                block_id = new utils_1.Block(blockIdentifier).identifier;
                return [2 /*return*/, this.fetchEndpoint('starknet_getClassAt', {
                        block_id: block_id,
                        contract_address: contractAddress,
                    })];
            });
        });
    };
    RpcProvider.prototype.getCode = function (_contractAddress, _blockIdentifier) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('RPC 0.1.0 does not implement getCode function');
            });
        });
    };
    RpcProvider.prototype.getEstimateFee = function (invocation, invocationDetails, blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier)];
            });
        });
    };
    RpcProvider.prototype.getInvokeEstimateFee = function (invocation, invocationDetails, blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            var block_id;
            return __generator(this, function (_a) {
                block_id = new utils_1.Block(blockIdentifier).identifier;
                return [2 /*return*/, this.fetchEndpoint('starknet_estimateFee', {
                        request: {
                            type: 'INVOKE',
                            contract_address: invocation.contractAddress,
                            calldata: (0, provider_1.parseCalldata)(invocation.calldata),
                            signature: (0, number_1.bigNumberishArrayToHexadecimalStringArray)(invocation.signature || []),
                            version: (0, number_1.toHex)((0, number_1.toBN)((invocationDetails === null || invocationDetails === void 0 ? void 0 : invocationDetails.version) || 0)),
                            nonce: (0, number_1.toHex)((0, number_1.toBN)(invocationDetails.nonce)),
                            max_fee: (0, number_1.toHex)((0, number_1.toBN)((invocationDetails === null || invocationDetails === void 0 ? void 0 : invocationDetails.maxFee) || 0)),
                        },
                        block_id: block_id,
                    }).then(this.responseParser.parseFeeEstimateResponse)];
            });
        });
    };
    // TODO: Revisit after Pathfinder release with JSON-RPC v0.2.1 RPC Spec
    RpcProvider.prototype.getDeclareEstimateFee = function (_a, details, blockIdentifier) {
        var senderAddress = _a.senderAddress, contractDefinition = _a.contractDefinition, signature = _a.signature;
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            var block_id;
            return __generator(this, function (_b) {
                block_id = new utils_1.Block(blockIdentifier).identifier;
                return [2 /*return*/, this.fetchEndpoint('starknet_estimateFee', {
                        request: {
                            type: 'DECLARE',
                            contract_class: {
                                program: contractDefinition.program,
                                entry_points_by_type: contractDefinition.entry_points_by_type,
                                abi: contractDefinition.abi, // rpc 2.0
                            },
                            sender_address: senderAddress,
                            signature: (0, number_1.bigNumberishArrayToHexadecimalStringArray)(signature || []),
                            version: (0, number_1.toHex)((0, number_1.toBN)((details === null || details === void 0 ? void 0 : details.version) || 0)),
                            nonce: (0, number_1.toHex)((0, number_1.toBN)(details.nonce)),
                            max_fee: (0, number_1.toHex)((0, number_1.toBN)((details === null || details === void 0 ? void 0 : details.maxFee) || 0)),
                        },
                        block_id: block_id,
                    }).then(this.responseParser.parseFeeEstimateResponse)];
            });
        });
    };
    RpcProvider.prototype.getDeployAccountEstimateFee = function (_a, details, blockIdentifier) {
        var classHash = _a.classHash, constructorCalldata = _a.constructorCalldata, addressSalt = _a.addressSalt, signature = _a.signature;
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            var block_id;
            return __generator(this, function (_b) {
                block_id = new utils_1.Block(blockIdentifier).identifier;
                return [2 /*return*/, this.fetchEndpoint('starknet_estimateFee', {
                        request: {
                            type: 'DEPLOY_ACCOUNT',
                            constructor_calldata: (0, number_1.bigNumberishArrayToHexadecimalStringArray)(constructorCalldata || []),
                            class_hash: (0, number_1.toHex)((0, number_1.toBN)(classHash)),
                            contract_address_salt: (0, number_1.toHex)((0, number_1.toBN)(addressSalt || 0)),
                            signature: (0, number_1.bigNumberishArrayToHexadecimalStringArray)(signature || []),
                            version: (0, number_1.toHex)((0, number_1.toBN)((details === null || details === void 0 ? void 0 : details.version) || 0)),
                            nonce: (0, number_1.toHex)((0, number_1.toBN)(details.nonce)),
                            max_fee: (0, number_1.toHex)((0, number_1.toBN)((details === null || details === void 0 ? void 0 : details.maxFee) || 0)),
                        },
                        block_id: block_id,
                    }).then(this.responseParser.parseFeeEstimateResponse)];
            });
        });
    };
    // TODO: Revisit after Pathfinder release with JSON-RPC v0.2.1 RPC Spec
    RpcProvider.prototype.declareContract = function (_a, details) {
        var contractDefinition = _a.contractDefinition, signature = _a.signature, senderAddress = _a.senderAddress;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.fetchEndpoint('starknet_addDeclareTransaction', {
                        contract_class: {
                            program: contractDefinition.program,
                            entry_points_by_type: contractDefinition.entry_points_by_type,
                            abi: contractDefinition.abi, // rpc 2.0
                        },
                        version: (0, number_1.toHex)((0, number_1.toBN)(details.version || 0)),
                        max_fee: (0, number_1.toHex)((0, number_1.toBN)(details.maxFee || 0)),
                        signature: (0, number_1.bigNumberishArrayToHexadecimalStringArray)(signature || []),
                        sender_address: senderAddress,
                        nonce: (0, number_1.toHex)((0, number_1.toBN)(details.nonce)),
                    })];
            });
        });
    };
    RpcProvider.prototype.deployContract = function (_a) {
        var contract = _a.contract, constructorCalldata = _a.constructorCalldata, addressSalt = _a.addressSalt;
        return __awaiter(this, void 0, void 0, function () {
            var contractDefinition;
            return __generator(this, function (_b) {
                contractDefinition = (0, provider_1.parseContract)(contract);
                return [2 /*return*/, this.fetchEndpoint('starknet_addDeployTransaction', {
                        contract_address_salt: addressSalt !== null && addressSalt !== void 0 ? addressSalt : (0, stark_1.randomAddress)(),
                        constructor_calldata: (0, number_1.bigNumberishArrayToHexadecimalStringArray)(constructorCalldata !== null && constructorCalldata !== void 0 ? constructorCalldata : []),
                        contract_definition: {
                            program: contractDefinition.program,
                            entry_points_by_type: contractDefinition.entry_points_by_type,
                            abi: contractDefinition.abi, // rpc 2.0
                        },
                    })];
            });
        });
    };
    RpcProvider.prototype.deployAccountContract = function (_a) {
        var classHash = _a.classHash, constructorCalldata = _a.constructorCalldata, addressSalt = _a.addressSalt;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.fetchEndpoint('starknet_addDeployAccountTransaction', {
                        constructor_calldata: (0, number_1.bigNumberishArrayToHexadecimalStringArray)(constructorCalldata || []),
                        class_hash: (0, number_1.toHex)((0, number_1.toBN)(classHash)),
                        contract_address_salt: (0, number_1.toHex)((0, number_1.toBN)(addressSalt || 0)),
                    })];
            });
        });
    };
    RpcProvider.prototype.invokeFunction = function (functionInvocation, details) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_addInvokeTransaction', {
                        function_invocation: {
                            contract_address: functionInvocation.contractAddress,
                            calldata: (0, provider_1.parseCalldata)(functionInvocation.calldata),
                        },
                        signature: (0, number_1.bigNumberishArrayToHexadecimalStringArray)(functionInvocation.signature || []),
                        max_fee: (0, number_1.toHex)((0, number_1.toBN)(details.maxFee || 0)),
                        version: (0, number_1.toHex)((0, number_1.toBN)(details.version || 0)),
                    })];
            });
        });
    };
    // Methods from Interface
    RpcProvider.prototype.callContract = function (call, blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            var block_id, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        block_id = new utils_1.Block(blockIdentifier).identifier;
                        return [4 /*yield*/, this.fetchEndpoint('starknet_call', {
                                request: {
                                    contract_address: call.contractAddress,
                                    entry_point_selector: (0, hash_1.getSelectorFromName)(call.entrypoint),
                                    calldata: (0, provider_1.parseCalldata)(call.calldata),
                                },
                                block_id: block_id,
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, this.responseParser.parseCallContractResponse(result)];
                }
            });
        });
    };
    RpcProvider.prototype.traceTransaction = function (transactionHash) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_traceTransaction', { transaction_hash: transactionHash })];
            });
        });
    };
    RpcProvider.prototype.traceBlockTransactions = function (blockHash) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_traceBlockTransactions', { block_hash: blockHash })];
            });
        });
    };
    RpcProvider.prototype.waitForTransaction = function (txHash, retryInterval) {
        if (retryInterval === void 0) { retryInterval = 8000; }
        return __awaiter(this, void 0, void 0, function () {
            var retries, onchain, successStates, errorStates, res, message, error, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        retries = this.retries;
                        onchain = false;
                        _a.label = 1;
                    case 1:
                        if (!!onchain) return [3 /*break*/, 7];
                        successStates = ['ACCEPTED_ON_L1', 'ACCEPTED_ON_L2', 'PENDING'];
                        errorStates = ['REJECTED', 'NOT_RECEIVED'];
                        // eslint-disable-next-line no-await-in-loop
                        return [4 /*yield*/, (0, provider_1.wait)(retryInterval)];
                    case 2:
                        // eslint-disable-next-line no-await-in-loop
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.getTransactionReceipt(txHash)];
                    case 4:
                        res = _a.sent();
                        if (res.status && successStates.includes(res.status)) {
                            onchain = true;
                        }
                        else if (res.status && errorStates.includes(res.status)) {
                            message = res.status;
                            error = new Error(message);
                            error.response = res;
                            throw error;
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        error_2 = _a.sent();
                        if (error_2 instanceof Error && errorStates.includes(error_2.message)) {
                            throw error_2;
                        }
                        if (retries === 0) {
                            throw new Error('waitForTransaction timedout with retries');
                        }
                        return [3 /*break*/, 6];
                    case 6:
                        retries -= 1;
                        return [3 /*break*/, 1];
                    case 7: return [4 /*yield*/, (0, provider_1.wait)(retryInterval)];
                    case 8:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the transaction count from a block.
     *
     *
     * @param blockIdentifier
     * @returns Number of transactions
     */
    RpcProvider.prototype.getTransactionCount = function (blockIdentifier) {
        return __awaiter(this, void 0, void 0, function () {
            var block_id;
            return __generator(this, function (_a) {
                block_id = new utils_1.Block(blockIdentifier).identifier;
                return [2 /*return*/, this.fetchEndpoint('starknet_getBlockTransactionCount', { block_id: block_id })];
            });
        });
    };
    /**
     * Gets the latest block number
     *
     *
     * @returns Number of the latest block
     */
    RpcProvider.prototype.getBlockNumber = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_blockNumber')];
            });
        });
    };
    /**
     * Gets syncing status of the node
     *
     *
     * @returns Object with the stats data
     */
    RpcProvider.prototype.getSyncingStats = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_syncing')];
            });
        });
    };
    /**
     * Gets all the events filtered
     *
     *
     * @returns events and the pagination of the events
     */
    RpcProvider.prototype.getEvents = function (eventFilter) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_getEvents', { filter: eventFilter })];
            });
        });
    };
    return RpcProvider;
}());
exports.RpcProvider = RpcProvider;
