"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SequencerProvider = void 0;
var url_join_1 = __importDefault(require("url-join"));
var constants_1 = require("../constants");
var fetchPonyfill_1 = __importDefault(require("../utils/fetchPonyfill"));
var hash_1 = require("../utils/hash");
var json_1 = require("../utils/json");
var number_1 = require("../utils/number");
var provider_1 = require("../utils/provider");
var sequencer_1 = require("../utils/responseParser/sequencer");
var stark_1 = require("../utils/stark");
var url_1 = require("../utils/url");
var errors_1 = require("./errors");
var utils_1 = require("./utils");
function isEmptyQueryObject(obj) {
    return (obj === undefined ||
        Object.keys(obj).length === 0 ||
        (Object.keys(obj).length === 1 &&
            Object.entries(obj).every(function (_a) {
                var _b = __read(_a, 2), k = _b[0], v = _b[1];
                return k === 'blockIdentifier' && v === null;
            })));
}
var SequencerProvider = /** @class */ (function () {
    function SequencerProvider(optionsOrProvider) {
        if (optionsOrProvider === void 0) { optionsOrProvider = { network: 'goerli-alpha' }; }
        var _a;
        this.responseParser = new sequencer_1.SequencerAPIResponseParser();
        if ('network' in optionsOrProvider) {
            this.baseUrl = SequencerProvider.getNetworkFromName(optionsOrProvider.network);
            this.chainId = SequencerProvider.getChainIdFromBaseUrl(this.baseUrl);
            this.feederGatewayUrl = (0, url_join_1.default)(this.baseUrl, 'feeder_gateway');
            this.gatewayUrl = (0, url_join_1.default)(this.baseUrl, 'gateway');
        }
        else {
            this.baseUrl = optionsOrProvider.baseUrl;
            this.feederGatewayUrl = (0, url_1.buildUrl)(this.baseUrl, 'feeder_gateway', optionsOrProvider.feederGatewayUrl);
            this.gatewayUrl = (0, url_1.buildUrl)(this.baseUrl, 'gateway', optionsOrProvider.gatewayUrl);
            this.chainId =
                (_a = optionsOrProvider.chainId) !== null && _a !== void 0 ? _a : SequencerProvider.getChainIdFromBaseUrl(optionsOrProvider.baseUrl);
            this.headers = optionsOrProvider === null || optionsOrProvider === void 0 ? void 0 : optionsOrProvider.headers;
        }
    }
    SequencerProvider.getNetworkFromName = function (name) {
        switch (name) {
            case 'mainnet-alpha':
                return 'https://alpha-mainnet.starknet.io';
            case 'goerli-alpha':
            default:
                return 'https://alpha4.starknet.io';
        }
    };
    SequencerProvider.getChainIdFromBaseUrl = function (baseUrl) {
        try {
            var url = new URL(baseUrl);
            if (url.host.includes('mainnet.starknet.io')) {
                return constants_1.StarknetChainId.MAINNET;
            }
        }
        catch (_a) {
            // eslint-disable-next-line no-console
            console.error("Could not parse baseUrl: ".concat(baseUrl));
        }
        return constants_1.StarknetChainId.TESTNET;
    };
    SequencerProvider.prototype.getFetchUrl = function (endpoint) {
        var gatewayUrlEndpoints = ['add_transaction'];
        return gatewayUrlEndpoints.includes(endpoint) ? this.gatewayUrl : this.feederGatewayUrl;
    };
    SequencerProvider.prototype.getFetchMethod = function (endpoint) {
        var postMethodEndpoints = [
            'add_transaction',
            'call_contract',
            'estimate_fee',
            'estimate_message_fee',
        ];
        return postMethodEndpoints.includes(endpoint) ? 'POST' : 'GET';
    };
    SequencerProvider.prototype.getQueryString = function (query) {
        if (isEmptyQueryObject(query)) {
            return '';
        }
        var queryString = Object.entries(query)
            .map(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            if (key === 'blockIdentifier') {
                var block = new utils_1.Block(value);
                return "".concat(block.queryIdentifier);
            }
            return "".concat(key, "=").concat(value);
        })
            .join('&');
        return "?".concat(queryString);
    };
    SequencerProvider.prototype.getHeaders = function (method) {
        if (method === 'POST') {
            return __assign({ 'Content-Type': 'application/json' }, this.headers);
        }
        return this.headers;
    };
    // typesafe fetch
    SequencerProvider.prototype.fetchEndpoint = function (endpoint) {
        // typescript type magic to create a nice fitting function interface
        var _a = []; // when both query and request are needed, we cant omit anything
        for (
        // typescript type magic to create a nice fitting function interface
        var _i = 1 // when both query and request are needed, we cant omit anything
        ; 
        // typescript type magic to create a nice fitting function interface
        _i < arguments.length // when both query and request are needed, we cant omit anything
        ; 
        // typescript type magic to create a nice fitting function interface
        _i++ // when both query and request are needed, we cant omit anything
        ) {
            // typescript type magic to create a nice fitting function interface
            _a[_i - 1] = arguments[_i]; // when both query and request are needed, we cant omit anything
        }
        // typescript type magic to create a nice fitting function interface
        var _b = __read(_a, 2), query = _b[0], request = _b[1]; // when both query and request are needed, we cant omit anything
        return __awaiter(this, void 0, void 0, function () {
            var baseUrl, method, queryString, headers, url, res, textResponse, responseBody, errorCode, err_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        baseUrl = this.getFetchUrl(endpoint);
                        method = this.getFetchMethod(endpoint);
                        queryString = this.getQueryString(query);
                        headers = this.getHeaders(method);
                        url = (0, url_join_1.default)(baseUrl, endpoint, queryString);
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, (0, fetchPonyfill_1.default)(url, {
                                method: method,
                                body: (0, json_1.stringify)(request),
                                headers: headers,
                            })];
                    case 2:
                        res = _c.sent();
                        return [4 /*yield*/, res.text()];
                    case 3:
                        textResponse = _c.sent();
                        if (!res.ok) {
                            responseBody = void 0;
                            try {
                                responseBody = (0, json_1.parse)(textResponse);
                            }
                            catch (_d) {
                                // if error parsing fails, return an http error
                                throw new errors_1.HttpError(res.statusText, res.status);
                            }
                            errorCode = responseBody.code || (responseBody === null || responseBody === void 0 ? void 0 : responseBody.status_code);
                            throw new errors_1.GatewayError(responseBody.message, errorCode); // Caught locally, and re-thrown for the user
                        }
                        if (endpoint === 'estimate_fee') {
                            return [2 /*return*/, (0, json_1.parseAlwaysAsBig)(textResponse, function (_, v) {
                                    if (v && typeof v === 'bigint') {
                                        return (0, number_1.toBN)(v.toString());
                                    }
                                    return v;
                                })];
                        }
                        return [2 /*return*/, (0, json_1.parse)(textResponse)];
                    case 4:
                        err_1 = _c.sent();
                        // rethrow custom errors
                        if (err_1 instanceof errors_1.GatewayError || err_1 instanceof errors_1.HttpError) {
                            throw err_1;
                        }
                        if (err_1 instanceof Error) {
                            throw Error("Could not ".concat(method, " from endpoint `").concat(url, "`: ").concat(err_1.message));
                        }
                        throw err_1;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    SequencerProvider.prototype.getChainId = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.resolve(this.chainId)];
            });
        });
    };
    SequencerProvider.prototype.callContract = function (_a, blockIdentifier) {
        var contractAddress = _a.contractAddress, entryPointSelector = _a.entrypoint, _b = _a.calldata, calldata = _b === void 0 ? [] : _b;
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_c) {
                return [2 /*return*/, this.fetchEndpoint('call_contract', { blockIdentifier: blockIdentifier }, {
                        signature: [],
                        contract_address: contractAddress,
                        entry_point_selector: (0, hash_1.getSelectorFromName)(entryPointSelector),
                        calldata: calldata,
                    }).then(this.responseParser.parseCallContractResponse)];
            });
        });
    };
    SequencerProvider.prototype.getBlock = function (blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('get_block', { blockIdentifier: blockIdentifier }).then(this.responseParser.parseGetBlockResponse)];
            });
        });
    };
    SequencerProvider.prototype.getNonce = function (contractAddress, blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('get_nonce', { contractAddress: contractAddress, blockIdentifier: blockIdentifier })];
            });
        });
    };
    SequencerProvider.prototype.getStorageAt = function (contractAddress, key, blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            var parsedKey;
            return __generator(this, function (_a) {
                parsedKey = (0, number_1.toBN)(key).toString(10);
                return [2 /*return*/, this.fetchEndpoint('get_storage_at', {
                        blockIdentifier: blockIdentifier,
                        contractAddress: contractAddress,
                        key: parsedKey,
                    })];
            });
        });
    };
    SequencerProvider.prototype.getTransaction = function (txHash) {
        return __awaiter(this, void 0, void 0, function () {
            var txHashHex;
            var _this = this;
            return __generator(this, function (_a) {
                txHashHex = (0, number_1.toHex)((0, number_1.toBN)(txHash));
                return [2 /*return*/, this.fetchEndpoint('get_transaction', { transactionHash: txHashHex }).then(function (value) {
                        return _this.responseParser.parseGetTransactionResponse(value);
                    })];
            });
        });
    };
    SequencerProvider.prototype.getTransactionReceipt = function (txHash) {
        return __awaiter(this, void 0, void 0, function () {
            var txHashHex;
            return __generator(this, function (_a) {
                txHashHex = (0, number_1.toHex)((0, number_1.toBN)(txHash));
                return [2 /*return*/, this.fetchEndpoint('get_transaction_receipt', { transactionHash: txHashHex }).then(this.responseParser.parseGetTransactionReceiptResponse)];
            });
        });
    };
    SequencerProvider.prototype.getClassAt = function (contractAddress, blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('get_full_contract', { blockIdentifier: blockIdentifier, contractAddress: contractAddress }).then(provider_1.parseContract)];
            });
        });
    };
    SequencerProvider.prototype.invokeFunction = function (functionInvocation, details) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_c) {
                return [2 /*return*/, this.fetchEndpoint('add_transaction', undefined, {
                        type: 'INVOKE_FUNCTION',
                        contract_address: functionInvocation.contractAddress,
                        calldata: (0, number_1.bigNumberishArrayToDecimalStringArray)((_a = functionInvocation.calldata) !== null && _a !== void 0 ? _a : []),
                        signature: (0, number_1.bigNumberishArrayToDecimalStringArray)((_b = functionInvocation.signature) !== null && _b !== void 0 ? _b : []),
                        nonce: (0, number_1.toHex)((0, number_1.toBN)(details.nonce)),
                        max_fee: (0, number_1.toHex)((0, number_1.toBN)(details.maxFee || 0)),
                        version: (0, number_1.toHex)((0, number_1.toBN)(details.version || 1)),
                    }).then(this.responseParser.parseInvokeFunctionResponse)];
            });
        });
    };
    SequencerProvider.prototype.deployContract = function (_a) {
        var contract = _a.contract, constructorCalldata = _a.constructorCalldata, addressSalt = _a.addressSalt;
        return __awaiter(this, void 0, void 0, function () {
            var contractDefinition;
            return __generator(this, function (_b) {
                contractDefinition = (0, provider_1.parseContract)(contract);
                return [2 /*return*/, this.fetchEndpoint('add_transaction', undefined, {
                        type: 'DEPLOY',
                        contract_address_salt: addressSalt !== null && addressSalt !== void 0 ? addressSalt : (0, stark_1.randomAddress)(),
                        constructor_calldata: (0, number_1.bigNumberishArrayToDecimalStringArray)(constructorCalldata !== null && constructorCalldata !== void 0 ? constructorCalldata : []),
                        contract_definition: contractDefinition,
                    }).then(this.responseParser.parseDeployContractResponse)];
            });
        });
    };
    SequencerProvider.prototype.deployAccountContract = function (_a, details) {
        var classHash = _a.classHash, constructorCalldata = _a.constructorCalldata, addressSalt = _a.addressSalt, signature = _a.signature;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.fetchEndpoint('add_transaction', undefined, {
                        type: 'DEPLOY_ACCOUNT',
                        contract_address_salt: addressSalt !== null && addressSalt !== void 0 ? addressSalt : (0, stark_1.randomAddress)(),
                        constructor_calldata: (0, number_1.bigNumberishArrayToDecimalStringArray)(constructorCalldata !== null && constructorCalldata !== void 0 ? constructorCalldata : []),
                        class_hash: (0, number_1.toHex)((0, number_1.toBN)(classHash)),
                        max_fee: (0, number_1.toHex)((0, number_1.toBN)(details.maxFee || 0)),
                        version: (0, number_1.toHex)((0, number_1.toBN)(details.version || 0)),
                        nonce: (0, number_1.toHex)((0, number_1.toBN)(details.nonce)),
                        signature: (0, number_1.bigNumberishArrayToDecimalStringArray)(signature || []),
                    }).then(this.responseParser.parseDeployContractResponse)];
            });
        });
    };
    SequencerProvider.prototype.declareContract = function (_a, details) {
        var senderAddress = _a.senderAddress, contractDefinition = _a.contractDefinition, signature = _a.signature;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.fetchEndpoint('add_transaction', undefined, {
                        type: 'DECLARE',
                        contract_class: contractDefinition,
                        nonce: (0, number_1.toHex)((0, number_1.toBN)(details.nonce)),
                        signature: (0, number_1.bigNumberishArrayToDecimalStringArray)(signature || []),
                        sender_address: senderAddress,
                        max_fee: (0, number_1.toHex)((0, number_1.toBN)(details.maxFee || 0)),
                        version: (0, number_1.toHex)((0, number_1.toBN)(details.version || 1)),
                    }).then(this.responseParser.parseDeclareContractResponse)];
            });
        });
    };
    SequencerProvider.prototype.getEstimateFee = function (invocation, invocationDetails, blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier)];
            });
        });
    };
    SequencerProvider.prototype.getInvokeEstimateFee = function (invocation, invocationDetails, blockIdentifier) {
        var _a;
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.fetchEndpoint('estimate_fee', { blockIdentifier: blockIdentifier }, {
                        type: 'INVOKE_FUNCTION',
                        contract_address: invocation.contractAddress,
                        calldata: (_a = invocation.calldata) !== null && _a !== void 0 ? _a : [],
                        signature: (0, number_1.bigNumberishArrayToDecimalStringArray)(invocation.signature || []),
                        version: (0, number_1.toHex)((0, number_1.toBN)((invocationDetails === null || invocationDetails === void 0 ? void 0 : invocationDetails.version) || 1)),
                        nonce: (0, number_1.toHex)((0, number_1.toBN)(invocationDetails.nonce)),
                    }).then(this.responseParser.parseFeeEstimateResponse)];
            });
        });
    };
    SequencerProvider.prototype.getDeclareEstimateFee = function (_a, details, blockIdentifier) {
        var senderAddress = _a.senderAddress, contractDefinition = _a.contractDefinition, signature = _a.signature;
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.fetchEndpoint('estimate_fee', { blockIdentifier: blockIdentifier }, {
                        type: 'DECLARE',
                        sender_address: senderAddress,
                        contract_class: contractDefinition,
                        signature: (0, number_1.bigNumberishArrayToDecimalStringArray)(signature || []),
                        version: (0, number_1.toHex)((0, number_1.toBN)((details === null || details === void 0 ? void 0 : details.version) || 1)),
                        nonce: (0, number_1.toHex)((0, number_1.toBN)(details.nonce)),
                    }).then(this.responseParser.parseFeeEstimateResponse)];
            });
        });
    };
    SequencerProvider.prototype.getDeployAccountEstimateFee = function (_a, details, blockIdentifier) {
        var classHash = _a.classHash, addressSalt = _a.addressSalt, constructorCalldata = _a.constructorCalldata, signature = _a.signature;
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.fetchEndpoint('estimate_fee', { blockIdentifier: blockIdentifier }, {
                        type: 'DEPLOY_ACCOUNT',
                        class_hash: (0, number_1.toHex)((0, number_1.toBN)(classHash)),
                        constructor_calldata: (0, number_1.bigNumberishArrayToDecimalStringArray)(constructorCalldata || []),
                        contract_address_salt: (0, number_1.toHex)((0, number_1.toBN)(addressSalt || 0)),
                        signature: (0, number_1.bigNumberishArrayToDecimalStringArray)(signature || []),
                        version: (0, number_1.toHex)((0, number_1.toBN)((details === null || details === void 0 ? void 0 : details.version) || 0)),
                        nonce: (0, number_1.toHex)((0, number_1.toBN)(details.nonce)),
                    }).then(this.responseParser.parseFeeEstimateResponse)];
            });
        });
    };
    SequencerProvider.prototype.getCode = function (contractAddress, blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('get_code', { contractAddress: contractAddress, blockIdentifier: blockIdentifier })];
            });
        });
    };
    SequencerProvider.prototype.waitForTransaction = function (txHash, retryInterval) {
        if (retryInterval === void 0) { retryInterval = 8000; }
        return __awaiter(this, void 0, void 0, function () {
            var onchain, res, successStates, errorStates, message, error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onchain = false;
                        _a.label = 1;
                    case 1:
                        if (!!onchain) return [3 /*break*/, 4];
                        // eslint-disable-next-line no-await-in-loop
                        return [4 /*yield*/, (0, provider_1.wait)(retryInterval)];
                    case 2:
                        // eslint-disable-next-line no-await-in-loop
                        _a.sent();
                        return [4 /*yield*/, this.getTransactionStatus(txHash)];
                    case 3:
                        res = _a.sent();
                        successStates = ['ACCEPTED_ON_L1', 'ACCEPTED_ON_L2', 'PENDING'];
                        errorStates = ['REJECTED', 'NOT_RECEIVED'];
                        if (successStates.includes(res.tx_status)) {
                            onchain = true;
                        }
                        else if (errorStates.includes(res.tx_status)) {
                            message = res.tx_failure_reason
                                ? "".concat(res.tx_status, ": ").concat(res.tx_failure_reason.code, "\n").concat(res.tx_failure_reason.error_message)
                                : res.tx_status;
                            error = new Error(message);
                            error.response = res;
                            throw error;
                        }
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the status of a transaction.
     *
     * [Reference](https://github.com/starkware-libs/cairo-lang/blob/f464ec4797361b6be8989e36e02ec690e74ef285/src/starkware/starknet/services/api/feeder_gateway/feeder_gateway_client.py#L48-L52)
     *
     * @param txHash
     * @returns the transaction status object { block_number, tx_status: NOT_RECEIVED | RECEIVED | PENDING | REJECTED | ACCEPTED_ONCHAIN }
     */
    SequencerProvider.prototype.getTransactionStatus = function (txHash) {
        return __awaiter(this, void 0, void 0, function () {
            var txHashHex;
            return __generator(this, function (_a) {
                txHashHex = (0, number_1.toHex)((0, number_1.toBN)(txHash));
                return [2 /*return*/, this.fetchEndpoint('get_transaction_status', { transactionHash: txHashHex })];
            });
        });
    };
    /**
     * Gets the smart contract address on the goerli testnet.
     *
     * [Reference](https://github.com/starkware-libs/cairo-lang/blob/f464ec4797361b6be8989e36e02ec690e74ef285/src/starkware/starknet/services/api/feeder_gateway/feeder_gateway_client.py#L13-L15)
     * @returns starknet smart contract addresses
     */
    SequencerProvider.prototype.getContractAddresses = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('get_contract_addresses')];
            });
        });
    };
    /**
     * Gets the transaction trace from a tx id.
     *
     *
     * @param txHash
     * @returns the transaction trace
     */
    SequencerProvider.prototype.getTransactionTrace = function (txHash) {
        return __awaiter(this, void 0, void 0, function () {
            var txHashHex;
            return __generator(this, function (_a) {
                txHashHex = (0, number_1.toHex)((0, number_1.toBN)(txHash));
                return [2 /*return*/, this.fetchEndpoint('get_transaction_trace', { transactionHash: txHashHex })];
            });
        });
    };
    SequencerProvider.prototype.estimateMessageFee = function (_a, blockIdentifier) {
        var from_address = _a.from_address, to_address = _a.to_address, entry_point_selector = _a.entry_point_selector, payload = _a.payload;
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            var validCallL1Handler;
            return __generator(this, function (_b) {
                validCallL1Handler = {
                    from_address: (0, number_1.getDecimalString)(from_address),
                    to_address: (0, number_1.getHexString)(to_address),
                    entry_point_selector: (0, hash_1.getSelector)(entry_point_selector),
                    payload: (0, number_1.getHexStringArray)(payload),
                };
                return [2 /*return*/, this.fetchEndpoint('estimate_message_fee', { blockIdentifier: blockIdentifier }, validCallL1Handler)];
            });
        });
    };
    return SequencerProvider;
}());
exports.SequencerProvider = SequencerProvider;
