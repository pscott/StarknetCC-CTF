"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Block = exports.txIdentifier = exports.formatHash = void 0;
var number_1 = require("../utils/number");
/**
 *
 * [Reference](https://github.com/starkware-libs/cairo-lang/blob/fc97bdd8322a7df043c87c371634b26c15ed6cee/src/starkware/starknet/services/api/feeder_gateway/feeder_gateway_client.py#L148-L153)
 *
 * @param hashValue
 * @param hashField
 */
function formatHash(hashValue) {
    if (typeof hashValue === 'string')
        return hashValue;
    return (0, number_1.toHex)((0, number_1.toBN)(hashValue));
}
exports.formatHash = formatHash;
/**
 *
 * [Reference](https://github.com/starkware-libs/cairo-lang/blob/fc97bdd8322a7df043c87c371634b26c15ed6cee/src/starkware/starknet/services/api/feeder_gateway/feeder_gateway_client.py#L156-L161)
 * @param txHash
 * @param txId
 */
function txIdentifier(txHash, txId) {
    if (!txHash) {
        return "transactionId=".concat(JSON.stringify(txId));
    }
    var hashString = formatHash(txHash);
    return "transactionHash=".concat(hashString);
}
exports.txIdentifier = txIdentifier;
var Block = /** @class */ (function () {
    function Block(_identifier) {
        var _this = this;
        this.hash = null;
        this.number = null;
        this.tag = null;
        this.valueOf = function () { return _this.number; };
        this.toString = function () { return _this.hash; };
        this.setIdentifier = function (__identifier) {
            if (typeof __identifier === 'string' && (0, number_1.isHex)(__identifier)) {
                this.hash = __identifier;
            }
            else if (typeof __identifier === 'number') {
                this.number = __identifier;
            }
            else {
                this.tag = __identifier;
            }
        };
        this.setIdentifier(_identifier);
    }
    Object.defineProperty(Block.prototype, "queryIdentifier", {
        get: function () {
            if (this.number !== null) {
                return "blockNumber=".concat(this.number);
            }
            if (this.hash !== null) {
                return "blockHash=".concat(this.hash);
            }
            return "blockNumber=".concat(this.tag);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Block.prototype, "identifier", {
        get: function () {
            if (this.number !== null) {
                return { block_number: this.number };
            }
            if (this.hash !== null) {
                return { block_hash: this.hash };
            }
            return this.tag;
        },
        set: function (_identifier) {
            this.setIdentifier(_identifier);
        },
        enumerable: false,
        configurable: true
    });
    return Block;
}());
exports.Block = Block;
