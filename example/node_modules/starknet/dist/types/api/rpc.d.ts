import { ADDRESS, FELT, OPENRPC } from './openrpc';
export declare namespace RPC {
    type Response = {
        id: number;
        jsonrpc: string;
        result?: any;
        error?: {
            code: string;
            message: string;
        };
    };
    type ChainId = OPENRPC.CHAIN_ID;
    type CallResponse = OPENRPC.CallResponse;
    type ContractAddress = ADDRESS;
    type Felt = FELT;
    type Nonce = OPENRPC.Nonce;
    type ContractClass = OPENRPC.ContractClass;
    type StateUpdate = OPENRPC.StateUpdate;
    type Transaction = OPENRPC.Transaction;
    type PendingTransactions = OPENRPC.PendingTransactions;
    type TransactionHash = OPENRPC.TransactionHash;
    type Trace = OPENRPC.Trace;
    type Traces = OPENRPC.Traces;
    type BlockHash = OPENRPC.BlockHash;
    type BlockHashAndNumber = OPENRPC.BlockHashAndNumber;
    type GetClassResponse = OPENRPC.ContractClass;
    type EstimateFeeResponse = OPENRPC.EstimatedFee;
    type GetBlockWithTxHashesResponse = OPENRPC.BlockWithTxHashes;
    type GetBlockWithTxs = OPENRPC.BlockWithTxs;
    type GetStorageAtResponse = OPENRPC.Storage;
    type TransactionReceipt = OPENRPC.TransactionReceipt;
    type GetTransactionByHashResponse = OPENRPC.Transaction;
    type GetTransactionByBlockIdAndIndex = OPENRPC.Transaction;
    type GetTransactionCountResponse = number;
    type GetBlockNumberResponse = OPENRPC.BlockNumber;
    type GetSyncingStatsResponse = OPENRPC.SyncingStatus;
    type EventFilter = OPENRPC.EventFilter;
    type GetEventsResponse = OPENRPC.Events;
    type InvokedTransaction = OPENRPC.InvokedTransaction;
    type DeclaredTransaction = OPENRPC.DeclaredTransaction;
    type DeployedTransaction = OPENRPC.DeployedTransaction;
    type Methods = OPENRPC.Methods;
}
