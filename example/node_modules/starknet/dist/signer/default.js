"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Signer = void 0;
var ellipticCurve_1 = require("../utils/ellipticCurve");
var hash_1 = require("../utils/hash");
var transaction_1 = require("../utils/transaction");
var typedData_1 = require("../utils/typedData");
var Signer = /** @class */ (function () {
    function Signer(keyPair) {
        if (keyPair === void 0) { keyPair = (0, ellipticCurve_1.genKeyPair)(); }
        this.keyPair = keyPair;
    }
    Signer.prototype.getPubKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, ellipticCurve_1.getStarkKey)(this.keyPair)];
            });
        });
    };
    Signer.prototype.signMessage = function (typedData, accountAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var msgHash;
            return __generator(this, function (_a) {
                msgHash = (0, typedData_1.getMessageHash)(typedData, accountAddress);
                return [2 /*return*/, (0, ellipticCurve_1.sign)(this.keyPair, msgHash)];
            });
        });
    };
    Signer.prototype.signTransaction = function (transactions, transactionsDetail, abis) {
        return __awaiter(this, void 0, void 0, function () {
            var calldata, msgHash;
            return __generator(this, function (_a) {
                if (abis && abis.length !== transactions.length) {
                    throw new Error('ABI must be provided for each transaction or no transaction');
                }
                calldata = (0, transaction_1.fromCallsToExecuteCalldata)(transactions);
                msgHash = (0, hash_1.calculateTransactionHash)(transactionsDetail.walletAddress, transactionsDetail.version, calldata, transactionsDetail.maxFee, transactionsDetail.chainId, transactionsDetail.nonce);
                return [2 /*return*/, (0, ellipticCurve_1.sign)(this.keyPair, msgHash)];
            });
        });
    };
    Signer.prototype.signDeployAccountTransaction = function (_a) {
        var classHash = _a.classHash, contractAddress = _a.contractAddress, constructorCalldata = _a.constructorCalldata, addressSalt = _a.addressSalt, maxFee = _a.maxFee, version = _a.version, chainId = _a.chainId, nonce = _a.nonce;
        return __awaiter(this, void 0, void 0, function () {
            var msgHash;
            return __generator(this, function (_b) {
                msgHash = (0, hash_1.calculateDeployAccountTransactionHash)(contractAddress, classHash, constructorCalldata, addressSalt, version, maxFee, chainId, nonce);
                return [2 /*return*/, (0, ellipticCurve_1.sign)(this.keyPair, msgHash)];
            });
        });
    };
    Signer.prototype.signDeclareTransaction = function (
    // contractClass: ContractClass,  // Should be used once class hash is present in ContractClass
    _a) {
        var classHash = _a.classHash, senderAddress = _a.senderAddress, chainId = _a.chainId, maxFee = _a.maxFee, version = _a.version, nonce = _a.nonce;
        return __awaiter(this, void 0, void 0, function () {
            var msgHash;
            return __generator(this, function (_b) {
                msgHash = (0, hash_1.calculateDeclareTransactionHash)(classHash, senderAddress, version, maxFee, chainId, nonce);
                return [2 /*return*/, (0, ellipticCurve_1.sign)(this.keyPair, msgHash)];
            });
        });
    };
    return Signer;
}());
exports.Signer = Signer;
