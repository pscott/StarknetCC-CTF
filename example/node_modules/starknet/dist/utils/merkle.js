"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proofMerklePath = exports.MerkleTree = void 0;
var hash_1 = require("./hash");
var number_1 = require("./number");
var MerkleTree = /** @class */ (function () {
    function MerkleTree(leafHashes) {
        this.branches = [];
        this.leaves = leafHashes;
        this.root = this.build(leafHashes);
    }
    MerkleTree.prototype.build = function (leaves) {
        if (leaves.length === 1) {
            return leaves[0];
        }
        if (leaves.length !== this.leaves.length) {
            this.branches.push(leaves);
        }
        var newLeaves = [];
        for (var i = 0; i < leaves.length; i += 2) {
            if (i + 1 === leaves.length) {
                newLeaves.push(MerkleTree.hash(leaves[i], '0x0'));
            }
            else {
                newLeaves.push(MerkleTree.hash(leaves[i], leaves[i + 1]));
            }
        }
        return this.build(newLeaves);
    };
    MerkleTree.hash = function (a, b) {
        var _a = __read([(0, number_1.toBN)(a), (0, number_1.toBN)(b)].sort(function (x, y) { return (x.gte(y) ? 1 : -1); }), 2), aSorted = _a[0], bSorted = _a[1];
        return (0, hash_1.pedersen)([aSorted, bSorted]);
    };
    MerkleTree.prototype.getProof = function (leaf, branch, hashPath) {
        var _a, _b;
        if (branch === void 0) { branch = this.leaves; }
        if (hashPath === void 0) { hashPath = []; }
        var index = branch.indexOf(leaf);
        if (index === -1) {
            throw new Error('leaf not found');
        }
        if (branch.length === 1) {
            return hashPath;
        }
        var isLeft = index % 2 === 0;
        var neededBranch = (_a = (isLeft ? branch[index + 1] : branch[index - 1])) !== null && _a !== void 0 ? _a : '0x0';
        var newHashPath = __spreadArray(__spreadArray([], __read(hashPath), false), [neededBranch], false);
        var currentBranchLevelIndex = this.leaves.length === branch.length
            ? -1
            : this.branches.findIndex(function (b) { return b.length === branch.length; });
        var nextBranch = (_b = this.branches[currentBranchLevelIndex + 1]) !== null && _b !== void 0 ? _b : [this.root];
        return this.getProof(MerkleTree.hash(isLeft ? leaf : neededBranch, isLeft ? neededBranch : leaf), nextBranch, newHashPath);
    };
    return MerkleTree;
}());
exports.MerkleTree = MerkleTree;
function proofMerklePath(root, leaf, path) {
    if (path.length === 0) {
        return root === leaf;
    }
    var _a = __read(path), next = _a[0], rest = _a.slice(1);
    return proofMerklePath(root, MerkleTree.hash(leaf, next), rest);
}
exports.proofMerklePath = proofMerklePath;
